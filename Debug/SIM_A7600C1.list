
SIM_A7600C1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000169c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08001824  08001824  00011824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a98  08001a98  00011a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a9c  08001a9c  00011a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08001aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  7 .bss          00001260  20000078  20000078  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  200012d8  200012d8  00020078  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007f0a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000185b  00000000  00000000  00027fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000608  00000000  00000000  00029810  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000510  00000000  00000000  00029e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002ba8  00000000  00000000  0002a328  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002082  00000000  00000000  0002ced0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002ef52  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001624  00000000  00000000  0002efd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000305f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800180c 	.word	0x0800180c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	0800180c 	.word	0x0800180c

080001c8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <NVIC_PriorityGroupConfig+0x24>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
 8000200:	230f      	movs	r3, #15
 8000202:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d039      	beq.n	8000280 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <NVIC_Init+0xbc>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	43db      	mvns	r3, r3
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	b2db      	uxtb	r3, r3
 8000216:	f003 0307 	and.w	r3, r3, #7
 800021a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	f1c3 0304 	rsb	r3, r3, #4
 8000222:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000224:	7b7a      	ldrb	r2, [r7, #13]
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	fa42 f303 	asr.w	r3, r2, r3
 800022c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	461a      	mov	r2, r3
 8000234:	7bbb      	ldrb	r3, [r7, #14]
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	789a      	ldrb	r2, [r3, #2]
 8000240:	7b7b      	ldrb	r3, [r7, #13]
 8000242:	4013      	ands	r3, r2
 8000244:	b2da      	uxtb	r2, r3
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	4313      	orrs	r3, r2
 800024a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <NVIC_Init+0xc0>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4413      	add	r3, r2
 800025a:	7bfa      	ldrb	r2, [r7, #15]
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <NVIC_Init+0xc0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f003 031f 	and.w	r3, r3, #31
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027e:	e00f      	b.n	80002a0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <NVIC_Init+0xc0>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f003 031f 	and.w	r3, r3, #31
 8000294:	2201      	movs	r2, #1
 8000296:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000298:	f100 0320 	add.w	r3, r0, #32
 800029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b087      	sub	sp, #28
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e076      	b.n	80003be <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002d0:	2201      	movs	r2, #1
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	fa02 f303 	lsl.w	r3, r2, r3
 80002d8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	4013      	ands	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002e4:	68fa      	ldr	r2, [r7, #12]
 80002e6:	693b      	ldr	r3, [r7, #16]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d165      	bne.n	80003b8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	2103      	movs	r1, #3
 80002f6:	fa01 f303 	lsl.w	r3, r1, r3
 80002fa:	43db      	mvns	r3, r3
 80002fc:	401a      	ands	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	791b      	ldrb	r3, [r3, #4]
 800030a:	4619      	mov	r1, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	431a      	orrs	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	791b      	ldrb	r3, [r3, #4]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d003      	beq.n	800032a <GPIO_Init+0x76>
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	791b      	ldrb	r3, [r3, #4]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d12e      	bne.n	8000388 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	689a      	ldr	r2, [r3, #8]
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	2103      	movs	r1, #3
 8000334:	fa01 f303 	lsl.w	r3, r1, r3
 8000338:	43db      	mvns	r3, r3
 800033a:	401a      	ands	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	795b      	ldrb	r3, [r3, #5]
 8000348:	4619      	mov	r1, r3
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	431a      	orrs	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	685a      	ldr	r2, [r3, #4]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	b29b      	uxth	r3, r3
 8000360:	4619      	mov	r1, r3
 8000362:	2301      	movs	r3, #1
 8000364:	408b      	lsls	r3, r1
 8000366:	43db      	mvns	r3, r3
 8000368:	401a      	ands	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	7992      	ldrb	r2, [r2, #6]
 8000376:	4611      	mov	r1, r2
 8000378:	697a      	ldr	r2, [r7, #20]
 800037a:	b292      	uxth	r2, r2
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	b292      	uxth	r2, r2
 8000382:	431a      	orrs	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	b29b      	uxth	r3, r3
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	2103      	movs	r1, #3
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	43db      	mvns	r3, r3
 800039a:	401a      	ands	r2, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68da      	ldr	r2, [r3, #12]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	79db      	ldrb	r3, [r3, #7]
 80003a8:	4619      	mov	r1, r3
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	3301      	adds	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	2b0f      	cmp	r3, #15
 80003c2:	d985      	bls.n	80002d0 <GPIO_Init+0x1c>
    }
  }
}
 80003c4:	bf00      	nop
 80003c6:	371c      	adds	r7, #28
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2200      	movs	r2, #0
 80003e4:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2200      	movs	r2, #0
 80003ea:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2200      	movs	r2, #0
 80003f0:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2200      	movs	r2, #0
 80003f6:	71da      	strb	r2, [r3, #7]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000410:	2300      	movs	r3, #0
 8000412:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	691a      	ldr	r2, [r3, #16]
 8000418:	887b      	ldrh	r3, [r7, #2]
 800041a:	4013      	ands	r3, r2
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000420:	2301      	movs	r3, #1
 8000422:	73fb      	strb	r3, [r7, #15]
 8000424:	e001      	b.n	800042a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000426:	2300      	movs	r3, #0
 8000428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800042a:	7bfb      	ldrb	r3, [r7, #15]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	887a      	ldrh	r2, [r7, #2]
 8000448:	831a      	strh	r2, [r3, #24]
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	460b      	mov	r3, r1
 8000460:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	887a      	ldrh	r2, [r7, #2]
 8000466:	835a      	strh	r2, [r3, #26]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	460b      	mov	r3, r1
 800047e:	807b      	strh	r3, [r7, #2]
 8000480:	4613      	mov	r3, r2
 8000482:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800048c:	787a      	ldrb	r2, [r7, #1]
 800048e:	887b      	ldrh	r3, [r7, #2]
 8000490:	f003 0307 	and.w	r3, r3, #7
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	fa02 f303 	lsl.w	r3, r2, r3
 800049a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800049c:	887b      	ldrh	r3, [r7, #2]
 800049e:	08db      	lsrs	r3, r3, #3
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	887b      	ldrh	r3, [r7, #2]
 80004a6:	08db      	lsrs	r3, r3, #3
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	461a      	mov	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3208      	adds	r2, #8
 80004b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b4:	887b      	ldrh	r3, [r7, #2]
 80004b6:	f003 0307 	and.w	r3, r3, #7
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	210f      	movs	r1, #15
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	43db      	mvns	r3, r3
 80004c4:	ea02 0103 	and.w	r1, r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f100 0208 	add.w	r2, r0, #8
 80004ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80004d2:	887b      	ldrh	r3, [r7, #2]
 80004d4:	08db      	lsrs	r3, r3, #3
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	461a      	mov	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3208      	adds	r2, #8
 80004de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004e8:	887b      	ldrh	r3, [r7, #2]
 80004ea:	08db      	lsrs	r3, r3, #3
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3208      	adds	r2, #8
 80004f4:	68b9      	ldr	r1, [r7, #8]
 80004f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
	...

08000508 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000508:	b480      	push	{r7}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
 800051c:	2302      	movs	r3, #2
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	2302      	movs	r3, #2
 8000526:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000528:	4b47      	ldr	r3, [pc, #284]	; (8000648 <RCC_GetClocksFreq+0x140>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	f003 030c 	and.w	r3, r3, #12
 8000530:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	2b04      	cmp	r3, #4
 8000536:	d007      	beq.n	8000548 <RCC_GetClocksFreq+0x40>
 8000538:	2b08      	cmp	r3, #8
 800053a:	d009      	beq.n	8000550 <RCC_GetClocksFreq+0x48>
 800053c:	2b00      	cmp	r3, #0
 800053e:	d13d      	bne.n	80005bc <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a42      	ldr	r2, [pc, #264]	; (800064c <RCC_GetClocksFreq+0x144>)
 8000544:	601a      	str	r2, [r3, #0]
      break;
 8000546:	e03d      	b.n	80005c4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a41      	ldr	r2, [pc, #260]	; (8000650 <RCC_GetClocksFreq+0x148>)
 800054c:	601a      	str	r2, [r3, #0]
      break;
 800054e:	e039      	b.n	80005c4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000550:	4b3d      	ldr	r3, [pc, #244]	; (8000648 <RCC_GetClocksFreq+0x140>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	0d9b      	lsrs	r3, r3, #22
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800055c:	4b3a      	ldr	r3, [pc, #232]	; (8000648 <RCC_GetClocksFreq+0x140>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000564:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00c      	beq.n	8000586 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800056c:	4a38      	ldr	r2, [pc, #224]	; (8000650 <RCC_GetClocksFreq+0x148>)
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	fbb2 f3f3 	udiv	r3, r2, r3
 8000574:	4a34      	ldr	r2, [pc, #208]	; (8000648 <RCC_GetClocksFreq+0x140>)
 8000576:	6852      	ldr	r2, [r2, #4]
 8000578:	0992      	lsrs	r2, r2, #6
 800057a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800057e:	fb02 f303 	mul.w	r3, r2, r3
 8000582:	61fb      	str	r3, [r7, #28]
 8000584:	e00b      	b.n	800059e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000586:	4a31      	ldr	r2, [pc, #196]	; (800064c <RCC_GetClocksFreq+0x144>)
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	fbb2 f3f3 	udiv	r3, r2, r3
 800058e:	4a2e      	ldr	r2, [pc, #184]	; (8000648 <RCC_GetClocksFreq+0x140>)
 8000590:	6852      	ldr	r2, [r2, #4]
 8000592:	0992      	lsrs	r2, r2, #6
 8000594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <RCC_GetClocksFreq+0x140>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	0c1b      	lsrs	r3, r3, #16
 80005a4:	f003 0303 	and.w	r3, r3, #3
 80005a8:	3301      	adds	r3, #1
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80005ae:	69fa      	ldr	r2, [r7, #28]
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
      break;
 80005ba:	e003      	b.n	80005c4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a23      	ldr	r2, [pc, #140]	; (800064c <RCC_GetClocksFreq+0x144>)
 80005c0:	601a      	str	r2, [r3, #0]
      break;
 80005c2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <RCC_GetClocksFreq+0x140>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005cc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	091b      	lsrs	r3, r3, #4
 80005d2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005d4:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <RCC_GetClocksFreq+0x14c>)
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	4413      	add	r3, r2
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	40da      	lsrs	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <RCC_GetClocksFreq+0x140>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80005f4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	0a9b      	lsrs	r3, r3, #10
 80005fa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005fc:	4a15      	ldr	r2, [pc, #84]	; (8000654 <RCC_GetClocksFreq+0x14c>)
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	40da      	lsrs	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <RCC_GetClocksFreq+0x140>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800061c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	0b5b      	lsrs	r3, r3, #13
 8000622:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <RCC_GetClocksFreq+0x14c>)
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	40da      	lsrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	60da      	str	r2, [r3, #12]
}
 800063c:	bf00      	nop
 800063e:	3724      	adds	r7, #36	; 0x24
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	40023800 	.word	0x40023800
 800064c:	00f42400 	.word	0x00f42400
 8000650:	017d7840 	.word	0x017d7840
 8000654:	20000000 	.word	0x20000000

08000658 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800066a:	490a      	ldr	r1, [pc, #40]	; (8000694 <RCC_AHB1PeriphClockCmd+0x3c>)
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <RCC_AHB1PeriphClockCmd+0x3c>)
 800066e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4313      	orrs	r3, r2
 8000674:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000676:	e006      	b.n	8000686 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000678:	4906      	ldr	r1, [pc, #24]	; (8000694 <RCC_AHB1PeriphClockCmd+0x3c>)
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <RCC_AHB1PeriphClockCmd+0x3c>)
 800067c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	43db      	mvns	r3, r3
 8000682:	4013      	ands	r3, r2
 8000684:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d006      	beq.n	80006b8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006aa:	490a      	ldr	r1, [pc, #40]	; (80006d4 <RCC_APB1PeriphClockCmd+0x3c>)
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <RCC_APB1PeriphClockCmd+0x3c>)
 80006ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006b6:	e006      	b.n	80006c6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006b8:	4906      	ldr	r1, [pc, #24]	; (80006d4 <RCC_APB1PeriphClockCmd+0x3c>)
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <RCC_APB1PeriphClockCmd+0x3c>)
 80006bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	43db      	mvns	r3, r3
 80006c2:	4013      	ands	r3, r2
 80006c4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006ea:	490a      	ldr	r1, [pc, #40]	; (8000714 <RCC_APB2PeriphClockCmd+0x3c>)
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <RCC_APB2PeriphClockCmd+0x3c>)
 80006ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006f6:	e006      	b.n	8000706 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <RCC_APB2PeriphClockCmd+0x3c>)
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <RCC_APB2PeriphClockCmd+0x3c>)
 80006fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	43db      	mvns	r3, r3
 8000702:	4013      	ands	r3, r2
 8000704:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	8a1b      	ldrh	r3, [r3, #16]
 8000736:	b29b      	uxth	r3, r3
 8000738:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	88db      	ldrh	r3, [r3, #6]
 8000746:	461a      	mov	r2, r3
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	4313      	orrs	r3, r2
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	b29a      	uxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	b29b      	uxth	r3, r3
 800075c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000760:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000764:	f023 030c 	bic.w	r3, r3, #12
 8000768:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	889a      	ldrh	r2, [r3, #4]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	891b      	ldrh	r3, [r3, #8]
 8000772:	4313      	orrs	r3, r2
 8000774:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800077a:	4313      	orrs	r3, r2
 800077c:	b29b      	uxth	r3, r3
 800077e:	461a      	mov	r2, r3
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	4313      	orrs	r3, r2
 8000784:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	b29a      	uxth	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	8a9b      	ldrh	r3, [r3, #20]
 8000792:	b29b      	uxth	r3, r3
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800079c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	899b      	ldrh	r3, [r3, #12]
 80007a2:	461a      	mov	r2, r3
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	4313      	orrs	r3, r2
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80007aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fea6 	bl	8000508 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a30      	ldr	r2, [pc, #192]	; (8000880 <USART_Init+0x168>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d003      	beq.n	80007cc <USART_Init+0xb4>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <USART_Init+0x16c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d102      	bne.n	80007d2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	623b      	str	r3, [r7, #32]
 80007d0:	e001      	b.n	80007d6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	899b      	ldrh	r3, [r3, #12]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	b21b      	sxth	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	da0c      	bge.n	80007fc <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80007e2:	6a3a      	ldr	r2, [r7, #32]
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	009a      	lsls	r2, r3, #2
 80007ec:	441a      	add	r2, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	e00b      	b.n	8000814 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80007fc:	6a3a      	ldr	r2, [r7, #32]
 80007fe:	4613      	mov	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4413      	add	r3, r2
 8000804:	009a      	lsls	r2, r3, #2
 8000806:	441a      	add	r2, r3
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <USART_Init+0x170>)
 8000818:	fba2 2303 	umull	r2, r3, r2, r3
 800081c:	095b      	lsrs	r3, r3, #5
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000824:	091b      	lsrs	r3, r3, #4
 8000826:	2264      	movs	r2, #100	; 0x64
 8000828:	fb02 f303 	mul.w	r3, r2, r3
 800082c:	69fa      	ldr	r2, [r7, #28]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	899b      	ldrh	r3, [r3, #12]
 8000836:	b29b      	uxth	r3, r3
 8000838:	b21b      	sxth	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	da0c      	bge.n	8000858 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	3332      	adds	r3, #50	; 0x32
 8000844:	4a10      	ldr	r2, [pc, #64]	; (8000888 <USART_Init+0x170>)
 8000846:	fba2 2303 	umull	r2, r3, r2, r3
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	f003 0307 	and.w	r3, r3, #7
 8000850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000852:	4313      	orrs	r3, r2
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
 8000856:	e00b      	b.n	8000870 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	3332      	adds	r3, #50	; 0x32
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <USART_Init+0x170>)
 8000860:	fba2 2303 	umull	r2, r3, r2, r3
 8000864:	095b      	lsrs	r3, r3, #5
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800086c:	4313      	orrs	r3, r2
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	b29a      	uxth	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	811a      	strh	r2, [r3, #8]
}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40011000 	.word	0x40011000
 8000884:	40011400 	.word	0x40011400
 8000888:	51eb851f 	.word	0x51eb851f

0800088c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d008      	beq.n	80008b0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	899b      	ldrh	r3, [r3, #12]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80008ae:	e007      	b.n	80008c0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	899b      	ldrh	r3, [r3, #12]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	819a      	strh	r2, [r3, #12]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80008d8:	887b      	ldrh	r3, [r7, #2]
 80008da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008de:	b29a      	uxth	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	809a      	strh	r2, [r3, #4]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	889b      	ldrh	r3, [r3, #4]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000902:	b29b      	uxth	r3, r3
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	807b      	strh	r3, [r7, #2]
 800091c:	4613      	mov	r3, r2
 800091e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	095b      	lsrs	r3, r3, #5
 800093a:	b2db      	uxtb	r3, r3
 800093c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800093e:	887b      	ldrh	r3, [r7, #2]
 8000940:	f003 031f 	and.w	r3, r3, #31
 8000944:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000946:	2201      	movs	r2, #1
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d103      	bne.n	800095e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	330c      	adds	r3, #12
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	e009      	b.n	8000972 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d103      	bne.n	800096c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3310      	adds	r3, #16
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e002      	b.n	8000972 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3314      	adds	r3, #20
 8000970:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000972:	787b      	ldrb	r3, [r7, #1]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d006      	beq.n	8000986 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	6811      	ldr	r1, [r2, #0]
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	430a      	orrs	r2, r1
 8000982:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000984:	e006      	b.n	8000994 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	6811      	ldr	r1, [r2, #0]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	43d2      	mvns	r2, r2
 8000990:	400a      	ands	r2, r1
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	371c      	adds	r7, #28
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	887b      	ldrh	r3, [r7, #2]
 80009b8:	4013      	ands	r3, r2
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e001      	b.n	80009ca <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80009d8:	b480      	push	{r7}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80009f4:	887b      	ldrh	r3, [r7, #2]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	095b      	lsrs	r3, r3, #5
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80009fe:	887b      	ldrh	r3, [r7, #2]
 8000a00:	f003 031f 	and.w	r3, r3, #31
 8000a04:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000a06:	2201      	movs	r2, #1
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d107      	bne.n	8000a26 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	899b      	ldrh	r3, [r3, #12]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	4013      	ands	r3, r2
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e011      	b.n	8000a4a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d107      	bne.n	8000a3c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	8a1b      	ldrh	r3, [r3, #16]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	4013      	ands	r3, r2
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e006      	b.n	8000a4a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	8a9b      	ldrh	r3, [r3, #20]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	4013      	ands	r3, r2
 8000a48:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000a52:	2201      	movs	r2, #1
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4013      	ands	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d005      	beq.n	8000a7c <USART_GetITStatus+0xa4>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000a76:	2301      	movs	r3, #1
 8000a78:	74fb      	strb	r3, [r7, #19]
 8000a7a:	e001      	b.n	8000a80 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a80:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	371c      	adds	r7, #28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <init_button>:
 */

#include "button.h"


void init_button(void){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpio;
	gpio.GPIO_Mode = GPIO_Mode_IN;
 8000a96:	2300      	movs	r3, #0
 8000a98:	713b      	strb	r3, [r7, #4]
	gpio.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	71fb      	strb	r3, [r7, #7]
	gpio.GPIO_Pin = BTN_PIN;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	603b      	str	r3, [r7, #0]
	GPIO_Init(BTN_PORT, &gpio);
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <init_button+0x24>)
 8000aa8:	f7ff fc04 	bl	80002b4 <GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <get_btn_status>:

uint8_t get_btn_status(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	return GPIO_ReadInputDataBit(BTN_PORT, BTN_PIN);
 8000abc:	2101      	movs	r1, #1
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <get_btn_status+0x14>)
 8000ac0:	f7ff fca0 	bl	8000404 <GPIO_ReadInputDataBit>
 8000ac4:	4603      	mov	r3, r0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40020000 	.word	0x40020000

08000ad0 <button_loop>:

button_state button_loop(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	static uint32_t old_click_ms = 0;
	static uint32_t time_to_wait = 0;
	static uint8_t status = NO_CLICK;
	static uint32_t time_long_click = 0;

	if(sys_get_tick_ms() - old_click_ms < time_to_wait){
 8000ad4:	f000 fc6e 	bl	80013b4 <sys_get_tick_ms>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <button_loop+0xf8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	1ad2      	subs	r2, r2, r3
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <button_loop+0xfc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d201      	bcs.n	8000aee <button_loop+0x1e>
		return 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e06a      	b.n	8000bc4 <button_loop+0xf4>
	}

	old_click_ms = sys_get_tick_ms();
 8000aee:	f000 fc61 	bl	80013b4 <sys_get_tick_ms>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <button_loop+0xf8>)
 8000af8:	601a      	str	r2, [r3, #0]

	switch (status)
 8000afa:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <button_loop+0x100>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d859      	bhi.n	8000bb6 <button_loop+0xe6>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <button_loop+0x38>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b1d 	.word	0x08000b1d
 8000b0c:	08000b35 	.word	0x08000b35
 8000b10:	08000b45 	.word	0x08000b45
 8000b14:	08000b55 	.word	0x08000b55
 8000b18:	08000b7b 	.word	0x08000b7b
	{
	case NO_CLICK:
		if(get_btn_status() == BTN_ON){
 8000b1c:	f7ff ffcc 	bl	8000ab8 <get_btn_status>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d149      	bne.n	8000bba <button_loop+0xea>
			status = HOLD_BUTTON;
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <button_loop+0x100>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	701a      	strb	r2, [r3, #0]
			//old_click_ms = sys_get_tick_ms();
			time_to_wait = 50;
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <button_loop+0xfc>)
 8000b2e:	2232      	movs	r2, #50	; 0x32
 8000b30:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b32:	e042      	b.n	8000bba <button_loop+0xea>

	case CLICK:
		uart_send_string(UART_PORT, "CLICK\r\n");
 8000b34:	4927      	ldr	r1, [pc, #156]	; (8000bd4 <button_loop+0x104>)
 8000b36:	4828      	ldr	r0, [pc, #160]	; (8000bd8 <button_loop+0x108>)
 8000b38:	f000 fc7a 	bl	8001430 <uart_send_string>
		status = NO_CLICK;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <button_loop+0x100>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
		break;
 8000b42:	e03d      	b.n	8000bc0 <button_loop+0xf0>

	case LONG_CLICK:
		uart_send_string(UART_PORT, "LONG CLICK\r\n");
 8000b44:	4925      	ldr	r1, [pc, #148]	; (8000bdc <button_loop+0x10c>)
 8000b46:	4824      	ldr	r0, [pc, #144]	; (8000bd8 <button_loop+0x108>)
 8000b48:	f000 fc72 	bl	8001430 <uart_send_string>
		status = NO_CLICK;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <button_loop+0x100>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
		break;
 8000b52:	e035      	b.n	8000bc0 <button_loop+0xf0>

	case HOLD_BUTTON:
		if(get_btn_status() == BTN_ON){
 8000b54:	f7ff ffb0 	bl	8000ab8 <get_btn_status>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d109      	bne.n	8000b72 <button_loop+0xa2>
			status = HOLD_BUTTON_LONG;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <button_loop+0x100>)
 8000b60:	2204      	movs	r2, #4
 8000b62:	701a      	strb	r2, [r3, #0]
			time_long_click = sys_get_tick_ms();
 8000b64:	f000 fc26 	bl	80013b4 <sys_get_tick_ms>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <button_loop+0x110>)
 8000b6e:	601a      	str	r2, [r3, #0]

		}else{
			status = CLICK;
		}
		break;
 8000b70:	e026      	b.n	8000bc0 <button_loop+0xf0>
			status = CLICK;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <button_loop+0x100>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
		break;
 8000b78:	e022      	b.n	8000bc0 <button_loop+0xf0>

	case HOLD_BUTTON_LONG:
		if(get_btn_status() == BTN_OFF){
 8000b7a:	f7ff ff9d 	bl	8000ab8 <get_btn_status>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d11c      	bne.n	8000bbe <button_loop+0xee>
			if(sys_get_tick_ms() - time_long_click >= 5000){
 8000b84:	f000 fc16 	bl	80013b4 <sys_get_tick_ms>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <button_loop+0x110>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d906      	bls.n	8000ba8 <button_loop+0xd8>
				status = LONG_CLICK;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <button_loop+0x100>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	701a      	strb	r2, [r3, #0]
				time_long_click = 0;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <button_loop+0x110>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
			}else{
				status = CLICK;
				time_long_click = 0;
			}
		}
		break;
 8000ba6:	e00a      	b.n	8000bbe <button_loop+0xee>
				status = CLICK;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <button_loop+0x100>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
				time_long_click = 0;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <button_loop+0x110>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
		break;
 8000bb4:	e003      	b.n	8000bbe <button_loop+0xee>
	
	default:
		break;
 8000bb6:	bf00      	nop
 8000bb8:	e002      	b.n	8000bc0 <button_loop+0xf0>
		break;
 8000bba:	bf00      	nop
 8000bbc:	e000      	b.n	8000bc0 <button_loop+0xf0>
		break;
 8000bbe:	bf00      	nop
	}

	return status;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <button_loop+0x100>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000094 	.word	0x20000094
 8000bcc:	20000098 	.word	0x20000098
 8000bd0:	2000009c 	.word	0x2000009c
 8000bd4:	08001824 	.word	0x08001824
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	0800182c 	.word	0x0800182c
 8000be0:	200000a0 	.word	0x200000a0

08000be4 <USART1_IRQHandler>:

char data_received[data_received_size];
uint32_t data_len;

/*Ngat USART1*/
void USART1_IRQHandler(void){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
    //uart_send_string(UART_PORT, "VAO NGAT");
    if(USART_GetITStatus(SIM_USART_PORT, USART_IT_RXNE) != RESET){
 8000bea:	f240 5125 	movw	r1, #1317	; 0x525
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <USART1_IRQHandler+0x4c>)
 8000bf0:	f7ff fef2 	bl	80009d8 <USART_GetITStatus>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d016      	beq.n	8000c28 <USART1_IRQHandler+0x44>
        //uart_send_string(UART_PORT, "VAO NGAT");
        char data = USART_ReceiveData(SIM_USART_PORT);
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <USART1_IRQHandler+0x4c>)
 8000bfc:	f7ff fe78 	bl	80008f0 <USART_ReceiveData>
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]

        // if(data_len < data_received_size - 1){
        //     data_received[data_len++] = data;
        // }

		data_received[data_len] = data;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <USART1_IRQHandler+0x50>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	490b      	ldr	r1, [pc, #44]	; (8000c38 <USART1_IRQHandler+0x54>)
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	54ca      	strb	r2, [r1, r3]
		data_len++;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <USART1_IRQHandler+0x50>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <USART1_IRQHandler+0x50>)
 8000c16:	6013      	str	r3, [r2, #0]

        old_ms_received = sys_get_tick_ms();
 8000c18:	f000 fbcc 	bl	80013b4 <sys_get_tick_ms>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <USART1_IRQHandler+0x58>)
 8000c20:	601a      	str	r2, [r3, #0]
        have_new_data = 1;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <USART1_IRQHandler+0x5c>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
        //uart_send_string(UART_PORT, data_received);
		//uart_send_byte(UART_PORT, data);

        //USART_ClearITPendingBit(SIM_USART_PORT, USART_IT_RXNE);
    }
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40011000 	.word	0x40011000
 8000c34:	200010d4 	.word	0x200010d4
 8000c38:	200010d8 	.word	0x200010d8
 8000c3c:	200000a4 	.word	0x200000a4
 8000c40:	200000a8 	.word	0x200000a8

08000c44 <init_gsm_sim>:


void init_gsm_sim(void){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0

    // Lien ket PA9 PA10 voi TX, RX cua UART1
	GPIO_PinAFConfig(SIM_USART_GPIO, GPIO_PinSource9, GPIO_AF_USART1);
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	2109      	movs	r1, #9
 8000c4e:	4827      	ldr	r0, [pc, #156]	; (8000cec <init_gsm_sim+0xa8>)
 8000c50:	f7ff fc10 	bl	8000474 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SIM_USART_GPIO, GPIO_PinSource10, GPIO_AF_USART1);
 8000c54:	2207      	movs	r2, #7
 8000c56:	210a      	movs	r1, #10
 8000c58:	4824      	ldr	r0, [pc, #144]	; (8000cec <init_gsm_sim+0xa8>)
 8000c5a:	f7ff fc0b 	bl	8000474 <GPIO_PinAFConfig>

	/*GPIO config*/
	GPIO_InitTypeDef gpio_sim;
	gpio_sim.GPIO_Mode = GPIO_Mode_AF;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	773b      	strb	r3, [r7, #28]
	gpio_sim.GPIO_Pin = SIM_USART_Tx_Pin | SIM_USART_Rx_Pin;
 8000c62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c66:	61bb      	str	r3, [r7, #24]
	gpio_sim.GPIO_Speed = GPIO_Speed_50MHz;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	777b      	strb	r3, [r7, #29]
	GPIO_Init(SIM_USART_GPIO, &gpio_sim);
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	4619      	mov	r1, r3
 8000c72:	481e      	ldr	r0, [pc, #120]	; (8000cec <init_gsm_sim+0xa8>)
 8000c74:	f7ff fb1e 	bl	80002b4 <GPIO_Init>

	/*uart config*/
	USART_InitTypeDef usart1;
	usart1.USART_BaudRate = 115200;
 8000c78:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c7c:	60bb      	str	r3, [r7, #8]
	usart1.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	827b      	strh	r3, [r7, #18]
	usart1.USART_WordLength = USART_WordLength_8b;
 8000c82:	2300      	movs	r3, #0
 8000c84:	81bb      	strh	r3, [r7, #12]
	usart1.USART_StopBits = USART_StopBits_1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	81fb      	strh	r3, [r7, #14]
    usart1.USART_Parity = USART_Parity_No;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	823b      	strh	r3, [r7, #16]
	usart1.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	82bb      	strh	r3, [r7, #20]
	USART_Init(SIM_USART_PORT, &usart1);
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4619      	mov	r1, r3
 8000c98:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <init_gsm_sim+0xac>)
 8000c9a:	f7ff fd3d 	bl	8000718 <USART_Init>

	USART_ITConfig(SIM_USART_PORT, USART_IT_RXNE, ENABLE);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f240 5125 	movw	r1, #1317	; 0x525
 8000ca4:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <init_gsm_sim+0xac>)
 8000ca6:	f7ff fe33 	bl	8000910 <USART_ITConfig>
	USART_Cmd(SIM_USART_PORT, ENABLE);
 8000caa:	2101      	movs	r1, #1
 8000cac:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <init_gsm_sim+0xac>)
 8000cae:	f7ff fded 	bl	800088c <USART_Cmd>

	/*nvic config*/
	NVIC_InitTypeDef nvic;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8000cb2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000cb6:	f7ff fa87 	bl	80001c8 <NVIC_PriorityGroupConfig>
	nvic.NVIC_IRQChannel = USART1_IRQn;
 8000cba:	2325      	movs	r3, #37	; 0x25
 8000cbc:	713b      	strb	r3, [r7, #4]
	nvic.NVIC_IRQChannelPreemptionPriority = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	717b      	strb	r3, [r7, #5]
	nvic.NVIC_IRQChannelSubPriority = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	71bb      	strb	r3, [r7, #6]
	nvic.NVIC_IRQChannelCmd = ENABLE;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&nvic);
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fa8f 	bl	80001f0 <NVIC_Init>

	memset(data_received, 0, sizeof(data_received));
 8000cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <init_gsm_sim+0xb0>)
 8000cda:	f000 fd8e 	bl	80017fa <memset>
	data_len = 0;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <init_gsm_sim+0xb4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40011000 	.word	0x40011000
 8000cf4:	200010d8 	.word	0x200010d8
 8000cf8:	200010d4 	.word	0x200010d4

08000cfc <init_gsm_power_pin>:

void init_gsm_power_pin(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
    /* status */
    GPIO_InitTypeDef gpio5;
    //GPIO_StructInit(&gpio5);
    gpio5.GPIO_Pin = SIM_STATUS_Pin;
 8000d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d06:	60bb      	str	r3, [r7, #8]
    gpio5.GPIO_Mode = GPIO_Mode_IN;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	733b      	strb	r3, [r7, #12]
    GPIO_Init(SIM_STATUS_GPIO, &gpio5);
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	4619      	mov	r1, r3
 8000d12:	4808      	ldr	r0, [pc, #32]	; (8000d34 <init_gsm_power_pin+0x38>)
 8000d14:	f7ff face 	bl	80002b4 <GPIO_Init>

    /* pwkey */
    GPIO_InitTypeDef gpio6;
    //GPIO_StructInit(&gpio6);
    gpio6.GPIO_Pin = SIM_PWKEY_Pin;
 8000d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1c:	603b      	str	r3, [r7, #0]
    gpio6.GPIO_Mode = GPIO_Mode_OUT;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	713b      	strb	r3, [r7, #4]
    GPIO_Init(SIM_PWKEY_GPIO, &gpio6);
 8000d22:	463b      	mov	r3, r7
 8000d24:	4619      	mov	r1, r3
 8000d26:	4803      	ldr	r0, [pc, #12]	; (8000d34 <init_gsm_power_pin+0x38>)
 8000d28:	f7ff fac4 	bl	80002b4 <GPIO_Init>
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40020000 	.word	0x40020000

08000d38 <gsm_get_status>:

uint8_t gsm_get_status(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	return GPIO_ReadInputDataBit(SIM_STATUS_GPIO, SIM_STATUS_Pin);
 8000d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <gsm_get_status+0x14>)
 8000d42:	f7ff fb5f 	bl	8000404 <GPIO_ReadInputDataBit>
 8000d46:	4603      	mov	r3, r0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40020000 	.word	0x40020000

08000d50 <gsm_pull_down_pwr>:

void gsm_pull_down_pwr(void){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	GPIO_SetBits(SIM_PWKEY_GPIO, SIM_PWKEY_Pin);
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <gsm_pull_down_pwr+0x14>)
 8000d5a:	f7ff fb6d 	bl	8000438 <GPIO_SetBits>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40020000 	.word	0x40020000

08000d68 <gsm_pull_up_pwr>:

void gsm_pull_up_pwr(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	GPIO_ResetBits(SIM_PWKEY_GPIO, SIM_PWKEY_Pin);
 8000d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <gsm_pull_up_pwr+0x14>)
 8000d72:	f7ff fb70 	bl	8000456 <GPIO_ResetBits>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020000 	.word	0x40020000

08000d80 <gsm_sim_send_string>:


void gsm_sim_send_string(const char *str){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    while (*str){
 8000d88:	e010      	b.n	8000dac <gsm_sim_send_string+0x2c>
        while (USART_GetFlagStatus(SIM_USART_PORT, USART_FLAG_TXE) == RESET);
 8000d8a:	bf00      	nop
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <gsm_sim_send_string+0x3c>)
 8000d90:	f7ff fe06 	bl	80009a0 <USART_GetFlagStatus>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f8      	beq.n	8000d8c <gsm_sim_send_string+0xc>
        USART_SendData(SIM_USART_PORT, *str++);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	4619      	mov	r1, r3
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <gsm_sim_send_string+0x3c>)
 8000da8:	f7ff fd90 	bl	80008cc <USART_SendData>
    while (*str){
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1ea      	bne.n	8000d8a <gsm_sim_send_string+0xa>
		//uart_send_byte(UART_PORT, *str++);
    }

}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <gsm_sim_have_new_data>:

uint32_t gsm_sim_have_new_data(void){
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
	return have_new_data;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <gsm_sim_have_new_data+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200000a8 	.word	0x200000a8

08000dd8 <gsm_sim_get_old_ms_received>:

uint32_t gsm_sim_get_old_ms_received(void){
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
	return old_ms_received;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <gsm_sim_get_old_ms_received+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200000a4 	.word	0x200000a4

08000df0 <gsm_sim_get_new_data>:

uint32_t gsm_sim_get_new_data(char *out_buff){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	if(have_new_data) {
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <gsm_sim_get_new_data+0x34>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00c      	beq.n	8000e1a <gsm_sim_get_new_data+0x2a>
		memcpy(out_buff, data_received, data_len);
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <gsm_sim_get_new_data+0x38>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4909      	ldr	r1, [pc, #36]	; (8000e2c <gsm_sim_get_new_data+0x3c>)
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fceb 	bl	80017e4 <memcpy>
		have_new_data = 0;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <gsm_sim_get_new_data+0x34>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
		return data_len;
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <gsm_sim_get_new_data+0x38>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	e000      	b.n	8000e1c <gsm_sim_get_new_data+0x2c>
	}

	return 0;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200000a8 	.word	0x200000a8
 8000e28:	200010d4 	.word	0x200010d4
 8000e2c:	200010d8 	.word	0x200010d8

08000e30 <gsm_sim_clear_buffer>:

void gsm_sim_clear_buffer(void){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
    memset(data_received, 0, sizeof(data_received));
 8000e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4804      	ldr	r0, [pc, #16]	; (8000e4c <gsm_sim_clear_buffer+0x1c>)
 8000e3c:	f000 fcdd 	bl	80017fa <memset>
	data_len = 0;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <gsm_sim_clear_buffer+0x20>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200010d8 	.word	0x200010d8
 8000e50:	200010d4 	.word	0x200010d4

08000e54 <enable_clock>:
 *      Author: MinhAnh
 */

#include "init.h"

void enable_clock(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f7ff fbfc 	bl	8000658 <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000e60:	2101      	movs	r1, #1
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff fbf8 	bl	8000658 <RCC_AHB1PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e6e:	f7ff fc13 	bl	8000698 <RCC_APB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000e72:	2101      	movs	r1, #1
 8000e74:	2010      	movs	r0, #16
 8000e76:	f7ff fc2f 	bl	80006d8 <RCC_APB2PeriphClockCmd>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <init>:

void init(void){
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
    enable_clock();
 8000e82:	f7ff ffe7 	bl	8000e54 <enable_clock>
    init_led();
 8000e86:	f000 f80d 	bl	8000ea4 <init_led>
    init_systick();
 8000e8a:	f000 fa71 	bl	8001370 <init_systick>
    init_uart();
 8000e8e:	f000 fa9d 	bl	80013cc <init_uart>
    init_gsm_sim();
 8000e92:	f7ff fed7 	bl	8000c44 <init_gsm_sim>
    init_gsm_power_pin();
 8000e96:	f7ff ff31 	bl	8000cfc <init_gsm_power_pin>
    init_button();
 8000e9a:	f7ff fdf9 	bl	8000a90 <init_button>
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <init_led>:
#include "led.h"

void init_led(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio;
    GPIO_StructInit(&gpio);
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fa8f 	bl	80003d0 <GPIO_StructInit>
    gpio.GPIO_Pin = LED_PIN;
 8000eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb6:	603b      	str	r3, [r7, #0]
    gpio.GPIO_Mode = GPIO_Mode_OUT;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	713b      	strb	r3, [r7, #4]
    GPIO_Init(LED_PORT, &gpio);
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <init_led+0x2c>)
 8000ec2:	f7ff f9f7 	bl	80002b4 <GPIO_Init>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <led_on>:

void led_on(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    GPIO_SetBits(LED_PORT, LED_PIN);
 8000ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <led_on+0x14>)
 8000ede:	f7ff faab 	bl	8000438 <GPIO_SetBits>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020400 	.word	0x40020400

08000eec <gsm_data_receive>:

#include "power_on_gsm.h"

static sq_t queue_data;

void gsm_data_receive(void){
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8000ef2:	af00      	add	r7, sp, #0
    if(gsm_sim_have_new_data() && sys_get_tick_ms() - gsm_sim_get_old_ms_received() > 50){
 8000ef4:	f7ff ff64 	bl	8000dc0 <gsm_sim_have_new_data>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d01f      	beq.n	8000f3e <gsm_data_receive+0x52>
 8000efe:	f000 fa59 	bl	80013b4 <sys_get_tick_ms>
 8000f02:	4604      	mov	r4, r0
 8000f04:	f7ff ff68 	bl	8000dd8 <gsm_sim_get_old_ms_received>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	1ae3      	subs	r3, r4, r3
 8000f0c:	2b32      	cmp	r3, #50	; 0x32
 8000f0e:	d916      	bls.n	8000f3e <gsm_data_receive+0x52>
        
        char data_receive[512];
        memset(data_receive, 0, sizeof(data_receive));
 8000f10:	463b      	mov	r3, r7
 8000f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fc6e 	bl	80017fa <memset>

        /*uint32_t data_len = */gsm_sim_get_new_data(data_receive);
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff65 	bl	8000df0 <gsm_sim_get_new_data>
        sq_push(&queue_data, data_receive);
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4809      	ldr	r0, [pc, #36]	; (8000f50 <gsm_data_receive+0x64>)
 8000f2c:	f000 f9ae 	bl	800128c <sq_push>
        gsm_sim_clear_buffer();
 8000f30:	f7ff ff7e 	bl	8000e30 <gsm_sim_clear_buffer>
        uart_send_string(UART_PORT, data_receive);
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <gsm_data_receive+0x68>)
 8000f3a:	f000 fa79 	bl	8001430 <uart_send_string>
        //uart_send_string(UART_PORT, "end string \r\n");
    }
    if(!sq_is_empty(&queue_data)){
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <gsm_data_receive+0x64>)
 8000f40:	f000 f970 	bl	8001224 <sq_is_empty>
        //return;
	}
}
 8000f44:	bf00      	nop
 8000f46:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd90      	pop	{r4, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200000ac 	.word	0x200000ac
 8000f54:	40004400 	.word	0x40004400

08000f58 <power_on>:



uint8_t power_on(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    static gsm_state state = PWR_GET_STATUS;
    static uint32_t old_tick_ms = 0;
    static uint32_t time_to_wait = 0;
    static uint8_t status = 0;

    if(sys_get_tick_ms() - old_tick_ms < time_to_wait){
 8000f5c:	f000 fa2a 	bl	80013b4 <sys_get_tick_ms>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b55      	ldr	r3, [pc, #340]	; (80010b8 <power_on+0x160>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	1ad2      	subs	r2, r2, r3
 8000f68:	4b54      	ldr	r3, [pc, #336]	; (80010bc <power_on+0x164>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d201      	bcs.n	8000f74 <power_on+0x1c>
        return 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e09f      	b.n	80010b4 <power_on+0x15c>
    }

    old_tick_ms = sys_get_tick_ms();
 8000f74:	f000 fa1e 	bl	80013b4 <sys_get_tick_ms>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <power_on+0x160>)
 8000f7c:	601a      	str	r2, [r3, #0]

    switch (state)
 8000f7e:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <power_on+0x168>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	f200 8090 	bhi.w	80010a8 <power_on+0x150>
 8000f88:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <power_on+0x38>)
 8000f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8e:	bf00      	nop
 8000f90:	08000fb5 	.word	0x08000fb5
 8000f94:	080010a9 	.word	0x080010a9
 8000f98:	080010a9 	.word	0x080010a9
 8000f9c:	08000ff3 	.word	0x08000ff3
 8000fa0:	0800100f 	.word	0x0800100f
 8000fa4:	0800102b 	.word	0x0800102b
 8000fa8:	08001051 	.word	0x08001051
 8000fac:	0800106d 	.word	0x0800106d
 8000fb0:	08001089 	.word	0x08001089
    {
    case PWR_GET_STATUS:

        uart_send_string(UART_PORT, "PWR GET STATUS\r\n");
 8000fb4:	4943      	ldr	r1, [pc, #268]	; (80010c4 <power_on+0x16c>)
 8000fb6:	4844      	ldr	r0, [pc, #272]	; (80010c8 <power_on+0x170>)
 8000fb8:	f000 fa3a 	bl	8001430 <uart_send_string>
        status = gsm_get_status();
 8000fbc:	f7ff febc 	bl	8000d38 <gsm_get_status>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b41      	ldr	r3, [pc, #260]	; (80010cc <power_on+0x174>)
 8000fc6:	701a      	strb	r2, [r3, #0]
        if(status == POWER_ON){
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <power_on+0x174>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d109      	bne.n	8000fe4 <power_on+0x8c>
            state = PWR_OFF_STEP1;
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <power_on+0x168>)
 8000fd2:	2206      	movs	r2, #6
 8000fd4:	701a      	strb	r2, [r3, #0]
            time_to_wait = 0;
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <power_on+0x164>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
            status = 0;
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <power_on+0x174>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
        }else{
            state = PWR_ON_STEP1;
            time_to_wait = 0;
        }
        break;
 8000fe2:	e066      	b.n	80010b2 <power_on+0x15a>
            state = PWR_ON_STEP1;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <power_on+0x168>)
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	701a      	strb	r2, [r3, #0]
            time_to_wait = 0;
 8000fea:	4b34      	ldr	r3, [pc, #208]	; (80010bc <power_on+0x164>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
        break;
 8000ff0:	e05f      	b.n	80010b2 <power_on+0x15a>
    
    case PWR_ON_STEP1:
        gsm_pull_down_pwr();
 8000ff2:	f7ff fead 	bl	8000d50 <gsm_pull_down_pwr>
        time_to_wait = 1000;
 8000ff6:	4b31      	ldr	r3, [pc, #196]	; (80010bc <power_on+0x164>)
 8000ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ffc:	601a      	str	r2, [r3, #0]
        state = PWR_ON_STEP2;
 8000ffe:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <power_on+0x168>)
 8001000:	2204      	movs	r2, #4
 8001002:	701a      	strb	r2, [r3, #0]
        uart_send_string(UART_PORT, "PWR ON STEP 1\r\n");
 8001004:	4932      	ldr	r1, [pc, #200]	; (80010d0 <power_on+0x178>)
 8001006:	4830      	ldr	r0, [pc, #192]	; (80010c8 <power_on+0x170>)
 8001008:	f000 fa12 	bl	8001430 <uart_send_string>
        break;
 800100c:	e051      	b.n	80010b2 <power_on+0x15a>

    case PWR_ON_STEP2:
        gsm_pull_up_pwr();
 800100e:	f7ff feab 	bl	8000d68 <gsm_pull_up_pwr>
        time_to_wait = 5000;
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <power_on+0x164>)
 8001014:	f241 3288 	movw	r2, #5000	; 0x1388
 8001018:	601a      	str	r2, [r3, #0]
        state = PWR_WAIT_ON;
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <power_on+0x168>)
 800101c:	2205      	movs	r2, #5
 800101e:	701a      	strb	r2, [r3, #0]
        uart_send_string(UART_PORT, "PWR ON STEP 2\r\n");
 8001020:	492c      	ldr	r1, [pc, #176]	; (80010d4 <power_on+0x17c>)
 8001022:	4829      	ldr	r0, [pc, #164]	; (80010c8 <power_on+0x170>)
 8001024:	f000 fa04 	bl	8001430 <uart_send_string>
        //uart_send_byte(UART_PORT, state);
        break;
 8001028:	e043      	b.n	80010b2 <power_on+0x15a>

    case PWR_WAIT_ON:
        status = gsm_get_status();
 800102a:	f7ff fe85 	bl	8000d38 <gsm_get_status>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <power_on+0x174>)
 8001034:	701a      	strb	r2, [r3, #0]
        //uart_send_string(UART_PORT, "PWR_WAIT_ON\r\n");
        //uart_send_byte(UART_PORT, gsm_get_status());
        if(status == POWER_ON){
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <power_on+0x174>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d136      	bne.n	80010ac <power_on+0x154>
            state = PWR_GET_STATUS;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <power_on+0x168>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
            uart_send_string(UART_PORT, "POWER ON\r\n");
 8001044:	4924      	ldr	r1, [pc, #144]	; (80010d8 <power_on+0x180>)
 8001046:	4820      	ldr	r0, [pc, #128]	; (80010c8 <power_on+0x170>)
 8001048:	f000 f9f2 	bl	8001430 <uart_send_string>
            return 1;
 800104c:	2301      	movs	r3, #1
 800104e:	e031      	b.n	80010b4 <power_on+0x15c>
        }
        break;

    case PWR_OFF_STEP1:
        gsm_pull_down_pwr();
 8001050:	f7ff fe7e 	bl	8000d50 <gsm_pull_down_pwr>
        time_to_wait = 2500;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <power_on+0x164>)
 8001056:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800105a:	601a      	str	r2, [r3, #0]
        state = PWR_OFF_STEP2;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <power_on+0x168>)
 800105e:	2207      	movs	r2, #7
 8001060:	701a      	strb	r2, [r3, #0]
        //uart_send_byte(UART_PORT, state);
        uart_send_string(UART_PORT, "PWR OFF STEP 1\r\n");
 8001062:	491e      	ldr	r1, [pc, #120]	; (80010dc <power_on+0x184>)
 8001064:	4818      	ldr	r0, [pc, #96]	; (80010c8 <power_on+0x170>)
 8001066:	f000 f9e3 	bl	8001430 <uart_send_string>
        break;
 800106a:	e022      	b.n	80010b2 <power_on+0x15a>

    case PWR_OFF_STEP2:
        gsm_pull_up_pwr();
 800106c:	f7ff fe7c 	bl	8000d68 <gsm_pull_up_pwr>
        time_to_wait = 3000;
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <power_on+0x164>)
 8001072:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001076:	601a      	str	r2, [r3, #0]
        state = PWR_WAIT_OFF;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <power_on+0x168>)
 800107a:	2208      	movs	r2, #8
 800107c:	701a      	strb	r2, [r3, #0]
        uart_send_string(UART_PORT, "PWR OFF STEP 2\r\n");
 800107e:	4918      	ldr	r1, [pc, #96]	; (80010e0 <power_on+0x188>)
 8001080:	4811      	ldr	r0, [pc, #68]	; (80010c8 <power_on+0x170>)
 8001082:	f000 f9d5 	bl	8001430 <uart_send_string>
        //uart_send_byte(UART_PORT, state);
        break;
 8001086:	e014      	b.n	80010b2 <power_on+0x15a>

    case PWR_WAIT_OFF:
        //uart_send_string(UART_PORT, "PWR_WAIT_OFF\r\n");
        time_to_wait = 50;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <power_on+0x164>)
 800108a:	2232      	movs	r2, #50	; 0x32
 800108c:	601a      	str	r2, [r3, #0]
        if(gsm_get_status() == POWER_OFF){
 800108e:	f7ff fe53 	bl	8000d38 <gsm_get_status>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10b      	bne.n	80010b0 <power_on+0x158>
            state = PWR_ON_STEP1;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <power_on+0x168>)
 800109a:	2203      	movs	r2, #3
 800109c:	701a      	strb	r2, [r3, #0]
            uart_send_string(UART_PORT, "POWER OFF\r\n");
 800109e:	4911      	ldr	r1, [pc, #68]	; (80010e4 <power_on+0x18c>)
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <power_on+0x170>)
 80010a2:	f000 f9c5 	bl	8001430 <uart_send_string>
        }
        break;
 80010a6:	e003      	b.n	80010b0 <power_on+0x158>

    default:
        break;
 80010a8:	bf00      	nop
 80010aa:	e002      	b.n	80010b2 <power_on+0x15a>
        break;
 80010ac:	bf00      	nop
 80010ae:	e000      	b.n	80010b2 <power_on+0x15a>
        break;
 80010b0:	bf00      	nop

    }
    return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200010bc 	.word	0x200010bc
 80010bc:	200010c0 	.word	0x200010c0
 80010c0:	200010c4 	.word	0x200010c4
 80010c4:	08001920 	.word	0x08001920
 80010c8:	40004400 	.word	0x40004400
 80010cc:	200010c5 	.word	0x200010c5
 80010d0:	08001934 	.word	0x08001934
 80010d4:	08001944 	.word	0x08001944
 80010d8:	08001954 	.word	0x08001954
 80010dc:	08001960 	.word	0x08001960
 80010e0:	08001974 	.word	0x08001974
 80010e4:	08001988 	.word	0x08001988

080010e8 <loop>:

void loop(void){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
    static uint8_t state_machine = POWER_ON;
    static uint8_t flag_sent = 0;
    
    switch (state_machine){
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <loop+0x68>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d00d      	beq.n	8001110 <loop+0x28>
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d015      	beq.n	8001124 <loop+0x3c>
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d000      	beq.n	80010fe <loop+0x16>
            flag_sent = 1;           
        }
        break;

    default:
        break;
 80010fc:	e025      	b.n	800114a <loop+0x62>
        if(power_on() == 1){
 80010fe:	f7ff ff2b 	bl	8000f58 <power_on>
 8001102:	4603      	mov	r3, r0
 8001104:	2b01      	cmp	r3, #1
 8001106:	d11b      	bne.n	8001140 <loop+0x58>
            state_machine = GSM_START;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <loop+0x68>)
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
        break;
 800110e:	e017      	b.n	8001140 <loop+0x58>
        if(send_command(m_list_command_startup)){
 8001110:	4810      	ldr	r0, [pc, #64]	; (8001154 <loop+0x6c>)
 8001112:	f000 f825 	bl	8001160 <send_command>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d013      	beq.n	8001144 <loop+0x5c>
            state_machine = GSM_INIT;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <loop+0x68>)
 800111e:	2203      	movs	r2, #3
 8001120:	701a      	strb	r2, [r3, #0]
        break;
 8001122:	e00f      	b.n	8001144 <loop+0x5c>
        if(!flag_sent && send_command(m_list_command_init)){
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <loop+0x70>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10d      	bne.n	8001148 <loop+0x60>
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <loop+0x74>)
 800112e:	f000 f817 	bl	8001160 <send_command>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d007      	beq.n	8001148 <loop+0x60>
            flag_sent = 1;           
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <loop+0x70>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
        break;
 800113e:	e003      	b.n	8001148 <loop+0x60>
        break;
 8001140:	bf00      	nop
 8001142:	e002      	b.n	800114a <loop+0x62>
        break;
 8001144:	bf00      	nop
 8001146:	e000      	b.n	800114a <loop+0x62>
        break;
 8001148:	bf00      	nop
    }
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000060 	.word	0x20000060
 8001154:	20000010 	.word	0x20000010
 8001158:	200010c6 	.word	0x200010c6
 800115c:	20000040 	.word	0x20000040

08001160 <send_command>:

uint8_t send_command(uint8_t **command_list){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    static uint8_t **current_cmd = NULL;
    static uint32_t old_tick_ms = 0;
    static uint8_t is_init = 0;

    if (!is_init) {
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <send_command+0x80>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10a      	bne.n	8001186 <send_command+0x26>
        current_cmd = command_list;
 8001170:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <send_command+0x84>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
        old_tick_ms = sys_get_tick_ms();
 8001176:	f000 f91d 	bl	80013b4 <sys_get_tick_ms>
 800117a:	4602      	mov	r2, r0
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <send_command+0x88>)
 800117e:	601a      	str	r2, [r3, #0]
        is_init = 1;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <send_command+0x80>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
    }

    if (*current_cmd == NULL) {
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <send_command+0x84>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d104      	bne.n	800119a <send_command+0x3a>
        is_init = 0; // Reset for next command list
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <send_command+0x80>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
        return 1;
 8001196:	2301      	movs	r3, #1
 8001198:	e01e      	b.n	80011d8 <send_command+0x78>
    }

    if (sys_get_tick_ms() - old_tick_ms >= 3000) {
 800119a:	f000 f90b 	bl	80013b4 <sys_get_tick_ms>
 800119e:	4602      	mov	r2, r0
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <send_command+0x88>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d913      	bls.n	80011d6 <send_command+0x76>
        gsm_sim_send_string((const char *)*current_cmd);
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <send_command+0x84>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fde3 	bl	8000d80 <gsm_sim_send_string>
        //gsm_sim_send_string("\r\nTEST\r\n");
        uart_send_string(UART_PORT, "\r\nSend command:\r\n");
 80011ba:	490c      	ldr	r1, [pc, #48]	; (80011ec <send_command+0x8c>)
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <send_command+0x90>)
 80011be:	f000 f937 	bl	8001430 <uart_send_string>
        current_cmd++;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <send_command+0x84>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3304      	adds	r3, #4
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <send_command+0x84>)
 80011ca:	6013      	str	r3, [r2, #0]
        old_tick_ms = sys_get_tick_ms();
 80011cc:	f000 f8f2 	bl	80013b4 <sys_get_tick_ms>
 80011d0:	4602      	mov	r2, r0
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <send_command+0x88>)
 80011d4:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200010c7 	.word	0x200010c7
 80011e4:	200010c8 	.word	0x200010c8
 80011e8:	200010cc 	.word	0x200010cc
 80011ec:	08001994 	.word	0x08001994
 80011f0:	40004400 	.word	0x40004400

080011f4 <sq_inc_tail>:
    return 1;
}

/* private function */
static void sq_inc_tail(sq_t *queue)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    queue->tail++;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60da      	str	r2, [r3, #12]
    if (queue->tail >= queue->num_items) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	429a      	cmp	r2, r3
 8001210:	d302      	bcc.n	8001218 <sq_inc_tail+0x24>
        queue->tail = 0;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
    }
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <sq_is_empty>:
        queue->head = 0;
    }
}

uint8_t sq_is_empty(sq_t *queue)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    if (queue->head == queue->tail) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d101      	bne.n	800123c <sq_is_empty+0x18>
        return 1;
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <sq_is_empty+0x1a>
    }

    return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <sq_is_full>:

uint8_t sq_is_full(sq_t *queue)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
    if (queue->head == 0 && queue->tail == queue->num_items - 1) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d108      	bne.n	800126c <sq_is_full+0x22>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	429a      	cmp	r2, r3
 8001266:	d101      	bne.n	800126c <sq_is_full+0x22>
        return 1;
 8001268:	2301      	movs	r3, #1
 800126a:	e009      	b.n	8001280 <sq_is_full+0x36>
    }

    else if (queue->tail == queue->head - 1) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	3b01      	subs	r3, #1
 8001276:	429a      	cmp	r2, r3
 8001278:	d101      	bne.n	800127e <sq_is_full+0x34>
        return 1;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <sq_is_full+0x36>
    }

    return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <sq_push>:

uint8_t sq_push(sq_t *queue, void *item)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
    if (sq_is_full(queue)) {
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffd7 	bl	800124a <sq_is_full>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <sq_push+0x1a>
        return 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e013      	b.n	80012ce <sq_push+0x42>
    }

    memcpy(queue->buffer + queue->tail * queue->sizeof_item, item, queue->sizeof_item);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f103 0210 	add.w	r2, r3, #16
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	6809      	ldr	r1, [r1, #0]
 80012b4:	fb01 f303 	mul.w	r3, r1, r3
 80012b8:	18d0      	adds	r0, r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	6839      	ldr	r1, [r7, #0]
 80012c2:	f000 fa8f 	bl	80017e4 <memcpy>
    sq_inc_tail(queue);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff94 	bl	80011f4 <sq_inc_tail>

    return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da0b      	bge.n	8001304 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80012ec:	490d      	ldr	r1, [pc, #52]	; (8001324 <NVIC_SetPriority+0x4c>)
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	3b04      	subs	r3, #4
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001302:	e009      	b.n	8001318 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001304:	4908      	ldr	r1, [pc, #32]	; (8001328 <NVIC_SetPriority+0x50>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00
 8001328:	e000e100 	.word	0xe000e100

0800132c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800133a:	d301      	bcc.n	8001340 <SysTick_Config+0x14>
 800133c:	2301      	movs	r3, #1
 800133e:	e011      	b.n	8001364 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <SysTick_Config+0x40>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001348:	3b01      	subs	r3, #1
 800134a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800134c:	210f      	movs	r1, #15
 800134e:	f04f 30ff 	mov.w	r0, #4294967295
 8001352:	f7ff ffc1 	bl	80012d8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <SysTick_Config+0x40>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <SysTick_Config+0x40>)
 800135e:	2207      	movs	r2, #7
 8001360:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	e000e010 	.word	0xe000e010

08001370 <init_systick>:
#include "systick.h"

static uint32_t msTick;

void init_systick(){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    //RCC_DeInit();
    SystemCoreClockUpdate();
 8001374:	f000 f91a 	bl	80015ac <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock/1000);
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <init_systick+0x20>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a05      	ldr	r2, [pc, #20]	; (8001394 <init_systick+0x24>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	099b      	lsrs	r3, r3, #6
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ffd1 	bl	800132c <SysTick_Config>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000064 	.word	0x20000064
 8001394:	10624dd3 	.word	0x10624dd3

08001398 <SysTick_Handler>:

void SysTick_Handler(void){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
    msTick ++;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Handler+0x18>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <SysTick_Handler+0x18>)
 80013a4:	6013      	str	r3, [r2, #0]
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	200010d0 	.word	0x200010d0

080013b4 <sys_get_tick_ms>:

uint32_t sys_get_tick_ms(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
    return msTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <sys_get_tick_ms+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	200010d0 	.word	0x200010d0

080013cc <init_uart>:
#include "uart.h"

void init_uart(void){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0

    //
	GPIO_PinAFConfig(UART_GPIO, GPIO_PinSource2, GPIO_AF_USART2);
 80013d2:	2207      	movs	r2, #7
 80013d4:	2102      	movs	r1, #2
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <init_uart+0x5c>)
 80013d8:	f7ff f84c 	bl	8000474 <GPIO_PinAFConfig>

	GPIO_InitTypeDef gpio_uart;
	gpio_uart.GPIO_Mode = GPIO_Mode_AF;
 80013dc:	2302      	movs	r3, #2
 80013de:	753b      	strb	r3, [r7, #20]
	gpio_uart.GPIO_Pin = UART_TX_GPIO_PIN;
 80013e0:	2304      	movs	r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
	gpio_uart.GPIO_Speed = GPIO_Speed_50MHz;
 80013e4:	2302      	movs	r3, #2
 80013e6:	757b      	strb	r3, [r7, #21]

	GPIO_Init(UART_GPIO, &gpio_uart);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	480e      	ldr	r0, [pc, #56]	; (8001428 <init_uart+0x5c>)
 80013f0:	f7fe ff60 	bl	80002b4 <GPIO_Init>

	USART_InitTypeDef usart2;
	usart2.USART_BaudRate = 115200;
 80013f4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80013f8:	603b      	str	r3, [r7, #0]
	usart2.USART_Mode = USART_Mode_Tx;
 80013fa:	2308      	movs	r3, #8
 80013fc:	817b      	strh	r3, [r7, #10]
	usart2.USART_WordLength = USART_WordLength_8b;
 80013fe:	2300      	movs	r3, #0
 8001400:	80bb      	strh	r3, [r7, #4]
	usart2.USART_StopBits = USART_StopBits_1;
 8001402:	2300      	movs	r3, #0
 8001404:	80fb      	strh	r3, [r7, #6]
	usart2.USART_Parity = USART_Parity_No;
 8001406:	2300      	movs	r3, #0
 8001408:	813b      	strh	r3, [r7, #8]
	usart2.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800140a:	2300      	movs	r3, #0
 800140c:	81bb      	strh	r3, [r7, #12]
	USART_Init(UART_PORT, &usart2);
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <init_uart+0x60>)
 8001414:	f7ff f980 	bl	8000718 <USART_Init>

	USART_Cmd(UART_PORT, ENABLE);
 8001418:	2101      	movs	r1, #1
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <init_uart+0x60>)
 800141c:	f7ff fa36 	bl	800088c <USART_Cmd>
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40020000 	.word	0x40020000
 800142c:	40004400 	.word	0x40004400

08001430 <uart_send_string>:

void uart_send_string(USART_TypeDef *USARTx, const char *str){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    while (*str){
 800143a:	e010      	b.n	800145e <uart_send_string+0x2e>
        while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);
 800143c:	bf00      	nop
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff faad 	bl	80009a0 <USART_GetFlagStatus>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f8      	beq.n	800143e <uart_send_string+0xe>
        USART_SendData(USARTx, *str++);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	603a      	str	r2, [r7, #0]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fa37 	bl	80008cc <USART_SendData>
    while (*str){
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ea      	bne.n	800143c <uart_send_string+0xc>
    }
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <main>:

/* Includes */
#include "../middle/init.h"

int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  init();
 8001474:	f7ff fd03 	bl	8000e7e <init>
  //led_on();

  uart_send_string(UART_PORT, "Test log\r\n");
 8001478:	4906      	ldr	r1, [pc, #24]	; (8001494 <main+0x24>)
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <main+0x28>)
 800147c:	f7ff ffd8 	bl	8001430 <uart_send_string>

  while (1)
  {
	  led_on();
 8001480:	f7ff fd28 	bl	8000ed4 <led_on>
	  gsm_data_receive();
 8001484:	f7ff fd32 	bl	8000eec <gsm_data_receive>
	  loop();
 8001488:	f7ff fe2e 	bl	80010e8 <loop>
	  button_loop();
 800148c:	f7ff fb20 	bl	8000ad0 <button_loop>
	  led_on();
 8001490:	e7f6      	b.n	8001480 <main+0x10>
 8001492:	bf00      	nop
 8001494:	08001a8c 	.word	0x08001a8c
 8001498:	40004400 	.word	0x40004400

0800149c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014a2:	e003      	b.n	80014ac <LoopCopyDataInit>

080014a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014aa:	3104      	adds	r1, #4

080014ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014b4:	d3f6      	bcc.n	80014a4 <CopyDataInit>
  ldr  r2, =_sbss
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014b8:	e002      	b.n	80014c0 <LoopFillZerobss>

080014ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014bc:	f842 3b04 	str.w	r3, [r2], #4

080014c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014c4:	d3f9      	bcc.n	80014ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014c6:	f000 f83b 	bl	8001540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f000 f967 	bl	800179c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ce:	f7ff ffcf 	bl	8001470 <main>
  bx  lr    
 80014d2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014d4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80014d8:	08001aa0 	.word	0x08001aa0
  ldr  r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014e0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80014e4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80014e8:	200012d8 	.word	0x200012d8

080014ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC_IRQHandler>

080014ee <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001500:	e7fe      	b.n	8001500 <HardFault_Handler+0x4>

08001502 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001506:	e7fe      	b.n	8001506 <MemManage_Handler+0x4>

08001508 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800150c:	e7fe      	b.n	800150c <BusFault_Handler+0x4>

0800150e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001512:	e7fe      	b.n	8001512 <UsageFault_Handler+0x4>

08001514 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001544:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <SystemInit+0x60>)
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <SystemInit+0x60>)
 8001548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001554:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <SystemInit+0x64>)
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <SystemInit+0x64>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <SystemInit+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <SystemInit+0x64>)
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <SystemInit+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <SystemInit+0x64>)
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <SystemInit+0x68>)
 800157a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800157c:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <SystemInit+0x64>)
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <SystemInit+0x64>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001586:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800158e:	f000 f889 	bl	80016a4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001592:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <SystemInit+0x60>)
 8001594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001598:	609a      	str	r2, [r3, #8]
#endif
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	40023800 	.word	0x40023800
 80015a8:	24003010 	.word	0x24003010

080015ac <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	2302      	movs	r3, #2
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	2302      	movs	r3, #2
 80015c4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <SystemCoreClockUpdate+0xe4>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d007      	beq.n	80015e6 <SystemCoreClockUpdate+0x3a>
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d009      	beq.n	80015ee <SystemCoreClockUpdate+0x42>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d13d      	bne.n	800165a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80015de:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <SystemCoreClockUpdate+0xe8>)
 80015e0:	4a2d      	ldr	r2, [pc, #180]	; (8001698 <SystemCoreClockUpdate+0xec>)
 80015e2:	601a      	str	r2, [r3, #0]
      break;
 80015e4:	e03d      	b.n	8001662 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80015e6:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <SystemCoreClockUpdate+0xe8>)
 80015e8:	4a2c      	ldr	r2, [pc, #176]	; (800169c <SystemCoreClockUpdate+0xf0>)
 80015ea:	601a      	str	r2, [r3, #0]
      break;
 80015ec:	e039      	b.n	8001662 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <SystemCoreClockUpdate+0xe4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	0d9b      	lsrs	r3, r3, #22
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <SystemCoreClockUpdate+0xe4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001602:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00c      	beq.n	8001624 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800160a:	4a24      	ldr	r2, [pc, #144]	; (800169c <SystemCoreClockUpdate+0xf0>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <SystemCoreClockUpdate+0xe4>)
 8001614:	6852      	ldr	r2, [r2, #4]
 8001616:	0992      	lsrs	r2, r2, #6
 8001618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e00b      	b.n	800163c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001624:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <SystemCoreClockUpdate+0xec>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <SystemCoreClockUpdate+0xe4>)
 800162e:	6852      	ldr	r2, [r2, #4]
 8001630:	0992      	lsrs	r2, r2, #6
 8001632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <SystemCoreClockUpdate+0xe4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	3301      	adds	r3, #1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <SystemCoreClockUpdate+0xe8>)
 8001656:	6013      	str	r3, [r2, #0]
      break;
 8001658:	e003      	b.n	8001662 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <SystemCoreClockUpdate+0xe8>)
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <SystemCoreClockUpdate+0xec>)
 800165e:	601a      	str	r2, [r3, #0]
      break;
 8001660:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <SystemCoreClockUpdate+0xe4>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <SystemCoreClockUpdate+0xf4>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <SystemCoreClockUpdate+0xe8>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <SystemCoreClockUpdate+0xe8>)
 8001680:	6013      	str	r3, [r2, #0]
}
 8001682:	bf00      	nop
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	20000064 	.word	0x20000064
 8001698:	00f42400 	.word	0x00f42400
 800169c:	017d7840 	.word	0x017d7840
 80016a0:	20000068 	.word	0x20000068

080016a4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80016b2:	4a36      	ldr	r2, [pc, #216]	; (800178c <SetSysClock+0xe8>)
 80016b4:	4b35      	ldr	r3, [pc, #212]	; (800178c <SetSysClock+0xe8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <SetSysClock+0xe8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3301      	adds	r3, #1
 80016cc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d103      	bne.n	80016dc <SetSysClock+0x38>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80016da:	d1f0      	bne.n	80016be <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <SetSysClock+0xe8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80016e8:	2301      	movs	r3, #1
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	e001      	b.n	80016f2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d142      	bne.n	800177e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80016f8:	4a24      	ldr	r2, [pc, #144]	; (800178c <SetSysClock+0xe8>)
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <SetSysClock+0xe8>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001704:	4a22      	ldr	r2, [pc, #136]	; (8001790 <SetSysClock+0xec>)
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <SetSysClock+0xec>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800170e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <SetSysClock+0xe8>)
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <SetSysClock+0xe8>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001718:	4a1c      	ldr	r2, [pc, #112]	; (800178c <SetSysClock+0xe8>)
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <SetSysClock+0xe8>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001722:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <SetSysClock+0xe8>)
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <SetSysClock+0xe8>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800172e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <SetSysClock+0xe8>)
 8001732:	4a18      	ldr	r2, [pc, #96]	; (8001794 <SetSysClock+0xf0>)
 8001734:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001736:	4a15      	ldr	r2, [pc, #84]	; (800178c <SetSysClock+0xe8>)
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <SetSysClock+0xe8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001740:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001742:	bf00      	nop
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <SetSysClock+0xe8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f9      	beq.n	8001744 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <SetSysClock+0xf4>)
 8001752:	f240 7205 	movw	r2, #1797	; 0x705
 8001756:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001758:	4a0c      	ldr	r2, [pc, #48]	; (800178c <SetSysClock+0xe8>)
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <SetSysClock+0xe8>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <SetSysClock+0xe8>)
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <SetSysClock+0xe8>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)//;
 8001770:	bf00      	nop
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <SetSysClock+0xe8>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b08      	cmp	r3, #8
 800177c:	d1f9      	bne.n	8001772 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000
 8001794:	07405419 	.word	0x07405419
 8001798:	40023c00 	.word	0x40023c00

0800179c <__libc_init_array>:
 800179c:	b570      	push	{r4, r5, r6, lr}
 800179e:	4e0d      	ldr	r6, [pc, #52]	; (80017d4 <__libc_init_array+0x38>)
 80017a0:	4c0d      	ldr	r4, [pc, #52]	; (80017d8 <__libc_init_array+0x3c>)
 80017a2:	1ba4      	subs	r4, r4, r6
 80017a4:	10a4      	asrs	r4, r4, #2
 80017a6:	2500      	movs	r5, #0
 80017a8:	42a5      	cmp	r5, r4
 80017aa:	d109      	bne.n	80017c0 <__libc_init_array+0x24>
 80017ac:	4e0b      	ldr	r6, [pc, #44]	; (80017dc <__libc_init_array+0x40>)
 80017ae:	4c0c      	ldr	r4, [pc, #48]	; (80017e0 <__libc_init_array+0x44>)
 80017b0:	f000 f82c 	bl	800180c <_init>
 80017b4:	1ba4      	subs	r4, r4, r6
 80017b6:	10a4      	asrs	r4, r4, #2
 80017b8:	2500      	movs	r5, #0
 80017ba:	42a5      	cmp	r5, r4
 80017bc:	d105      	bne.n	80017ca <__libc_init_array+0x2e>
 80017be:	bd70      	pop	{r4, r5, r6, pc}
 80017c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017c4:	4798      	blx	r3
 80017c6:	3501      	adds	r5, #1
 80017c8:	e7ee      	b.n	80017a8 <__libc_init_array+0xc>
 80017ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017ce:	4798      	blx	r3
 80017d0:	3501      	adds	r5, #1
 80017d2:	e7f2      	b.n	80017ba <__libc_init_array+0x1e>
 80017d4:	08001a98 	.word	0x08001a98
 80017d8:	08001a98 	.word	0x08001a98
 80017dc:	08001a98 	.word	0x08001a98
 80017e0:	08001a9c 	.word	0x08001a9c

080017e4 <memcpy>:
 80017e4:	b510      	push	{r4, lr}
 80017e6:	1e43      	subs	r3, r0, #1
 80017e8:	440a      	add	r2, r1
 80017ea:	4291      	cmp	r1, r2
 80017ec:	d100      	bne.n	80017f0 <memcpy+0xc>
 80017ee:	bd10      	pop	{r4, pc}
 80017f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017f8:	e7f7      	b.n	80017ea <memcpy+0x6>

080017fa <memset>:
 80017fa:	4402      	add	r2, r0
 80017fc:	4603      	mov	r3, r0
 80017fe:	4293      	cmp	r3, r2
 8001800:	d100      	bne.n	8001804 <memset+0xa>
 8001802:	4770      	bx	lr
 8001804:	f803 1b01 	strb.w	r1, [r3], #1
 8001808:	e7f9      	b.n	80017fe <memset+0x4>
	...

0800180c <_init>:
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	bf00      	nop
 8001810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001812:	bc08      	pop	{r3}
 8001814:	469e      	mov	lr, r3
 8001816:	4770      	bx	lr

08001818 <_fini>:
 8001818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181a:	bf00      	nop
 800181c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800181e:	bc08      	pop	{r3}
 8001820:	469e      	mov	lr, r3
 8001822:	4770      	bx	lr
